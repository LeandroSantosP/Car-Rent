generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  created_at  DateTime @default(now())
  Car         Car[]

  @@map("categories")
}

model Client {
  id             String        @id @default(uuid())
  name           String
  password       String
  email          String        @unique
  driver_license String
  avatar         String?
  admin          Boolean       @default(false)
  created_at     DateTime      @default(now())
  rantals        Rantals[]
  ClientToken    ClientToken[]

  @@map("clients")
}

model ClientToken {
  id String @id @default(uuid())

  refresh_token String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  expire_date DateTime

  created_at DateTime @default(now())

  @@map("client_token")
}

model Car {
  id                 String               @id @default(uuid())
  name               String
  description        String
  daily_rate         Int
  available          Boolean              @default(true)
  license_plate      String               @unique
  fine_amount        Int
  brand              String
  created_at         DateTime             @default(now())
  categoryId         String?
  Specification_Cars Specification_Cars[]
  category           Category?            @relation(fields: [categoryId], references: [id])
  car_image          Car_Image[]
  rantals            Rantals[]

  @@map("cars")
}

model Rantals {
  id                 String    @id @default(uuid())
  start_date         DateTime  @default(now())
  end_date           DateTime?
  expect_return_Date DateTime
  total              Int?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  @@map("rantals")
}

model Car_Image {
  id         String   @id @default(uuid())
  image_name String
  created_at DateTime @default(now())
  carId      String?
  car        Car?     @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("car_images")
}

model Specification {
  id                 String               @id @default(uuid())
  name               String
  description        String
  created_at         DateTime             @default(now())
  Specification_Cars Specification_Cars[]

  @@map("specification")
}

model Specification_Cars {
  specificationId String
  carId           String
  car             Car           @relation(fields: [carId], references: [id], onDelete: Cascade)
  specification   Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  @@id([specificationId, carId])
}
